// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ST_Assignment_1.Data;

#nullable disable

namespace ST_Assignment_1.Migrations
{
    [DbContext(typeof(WorkoutJournalDbContext))]
    [Migration("20250924175729_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ST_Assignment_1.Models.CalendarEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("CalendarEntries");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultReps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DefaultRestSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultSets")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 0,
                            DefaultReps = "8-15",
                            DefaultRestSeconds = 75,
                            DefaultSets = 3,
                            Description = "Standard push-up. Keep body aligned.",
                            Difficulty = 0,
                            Name = "Push-up"
                        },
                        new
                        {
                            Id = 2,
                            Category = 0,
                            DefaultReps = "8-20",
                            DefaultRestSeconds = 60,
                            DefaultSets = 3,
                            Description = "Incline push-up.",
                            Difficulty = 0,
                            Name = "Incline Push-up"
                        },
                        new
                        {
                            Id = 3,
                            Category = 0,
                            DefaultReps = "6-12",
                            DefaultRestSeconds = 90,
                            DefaultSets = 3,
                            Description = "Diamond push-up.",
                            Difficulty = 1,
                            Name = "Diamond Push-up"
                        },
                        new
                        {
                            Id = 4,
                            Category = 0,
                            DefaultReps = "6-12",
                            DefaultRestSeconds = 105,
                            DefaultSets = 3,
                            Description = "Pike push-up.",
                            Difficulty = 1,
                            Name = "Pike Push-up"
                        },
                        new
                        {
                            Id = 5,
                            Category = 1,
                            DefaultReps = "3-10",
                            DefaultRestSeconds = 135,
                            DefaultSets = 4,
                            Description = "Pull-up.",
                            Difficulty = 1,
                            Name = "Pull-up"
                        },
                        new
                        {
                            Id = 6,
                            Category = 1,
                            DefaultReps = "3-10",
                            DefaultRestSeconds = 135,
                            DefaultSets = 4,
                            Description = "Chin-up.",
                            Difficulty = 1,
                            Name = "Chin-up"
                        },
                        new
                        {
                            Id = 7,
                            Category = 1,
                            DefaultReps = "8-15",
                            DefaultRestSeconds = 75,
                            DefaultSets = 3,
                            Description = "Bodyweight row.",
                            Difficulty = 0,
                            Name = "Bodyweight Row (Australian Pull-up)"
                        },
                        new
                        {
                            Id = 8,
                            Category = 0,
                            DefaultReps = "6-15",
                            DefaultRestSeconds = 105,
                            DefaultSets = 3,
                            Description = "Parallel bar dips.",
                            Difficulty = 1,
                            Name = "Dips (parallel bar)"
                        },
                        new
                        {
                            Id = 9,
                            Category = 2,
                            DefaultReps = "12-20",
                            DefaultRestSeconds = 60,
                            DefaultSets = 3,
                            Description = "Bodyweight squat.",
                            Difficulty = 0,
                            Name = "Squat (bodyweight)"
                        },
                        new
                        {
                            Id = 10,
                            Category = 2,
                            DefaultReps = "8-15",
                            DefaultRestSeconds = 75,
                            DefaultSets = 3,
                            Description = "Jump squat.",
                            Difficulty = 1,
                            Name = "Jump Squat"
                        },
                        new
                        {
                            Id = 11,
                            Category = 2,
                            DefaultReps = "3-8",
                            DefaultRestSeconds = 135,
                            DefaultSets = 4,
                            Description = "Assisted pistol squat.",
                            Difficulty = 2,
                            Name = "Pistol Squat (assisted)"
                        },
                        new
                        {
                            Id = 12,
                            Category = 2,
                            DefaultReps = "8-15",
                            DefaultRestSeconds = 75,
                            DefaultSets = 3,
                            Description = "Lunges.",
                            Difficulty = 0,
                            Name = "Lunges (walking/static)"
                        },
                        new
                        {
                            Id = 13,
                            Category = 3,
                            DefaultReps = "30-90s",
                            DefaultRestSeconds = 60,
                            DefaultSets = 3,
                            Description = "Plank.",
                            Difficulty = 0,
                            Name = "Plank"
                        },
                        new
                        {
                            Id = 14,
                            Category = 3,
                            DefaultReps = "8-15",
                            DefaultRestSeconds = 75,
                            DefaultSets = 3,
                            Description = "Hanging leg raise.",
                            Difficulty = 1,
                            Name = "Hanging Leg Raise"
                        },
                        new
                        {
                            Id = 15,
                            Category = 4,
                            DefaultReps = "30s",
                            DefaultRestSeconds = 45,
                            DefaultSets = 3,
                            Description = "Mountain climbers.",
                            Difficulty = 0,
                            Name = "Mountain Climbers"
                        },
                        new
                        {
                            Id = 16,
                            Category = 4,
                            DefaultReps = "6-15",
                            DefaultRestSeconds = 90,
                            DefaultSets = 3,
                            Description = "Burpee.",
                            Difficulty = 1,
                            Name = "Burpee"
                        });
                });

            modelBuilder.Entity("ST_Assignment_1.Models.ExerciseTemplateItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("TargetReps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetRestSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("TargetSets")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("TemplateItems");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.SessionExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompletedSets")
                        .HasColumnType("integer");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<string>("TargetReps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetRestSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("TargetSets")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionExercises");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.SetRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActualRepsOrDuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlannedRepsOrDuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RestAfterSetSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("SessionExerciseId")
                        .HasColumnType("integer");

                    b.Property<int>("SetNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SessionExerciseId");

                    b.ToTable("SetRecords");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.WorkoutSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalendarEntryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkoutSessions");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.CalendarEntry", b =>
                {
                    b.HasOne("ST_Assignment_1.Models.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("ST_Assignment_1.Models.User", "User")
                        .WithMany("CalendarEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.ExerciseTemplateItem", b =>
                {
                    b.HasOne("ST_Assignment_1.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ST_Assignment_1.Models.CalendarEntry", null)
                        .WithMany("CustomItems")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ST_Assignment_1.Models.Template", null)
                        .WithMany("Items")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.SessionExercise", b =>
                {
                    b.HasOne("ST_Assignment_1.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ST_Assignment_1.Models.WorkoutSession", "Session")
                        .WithMany("SessionItems")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.SetRecord", b =>
                {
                    b.HasOne("ST_Assignment_1.Models.SessionExercise", "SessionExercise")
                        .WithMany("Sets")
                        .HasForeignKey("SessionExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionExercise");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.WorkoutSession", b =>
                {
                    b.HasOne("ST_Assignment_1.Models.CalendarEntry", "CalendarEntry")
                        .WithMany()
                        .HasForeignKey("CalendarEntryId");

                    b.HasOne("ST_Assignment_1.Models.User", "User")
                        .WithMany("WorkoutSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarEntry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.CalendarEntry", b =>
                {
                    b.Navigation("CustomItems");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.SessionExercise", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.Template", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.User", b =>
                {
                    b.Navigation("CalendarEntries");

                    b.Navigation("WorkoutSessions");
                });

            modelBuilder.Entity("ST_Assignment_1.Models.WorkoutSession", b =>
                {
                    b.Navigation("SessionItems");
                });
#pragma warning restore 612, 618
        }
    }
}
